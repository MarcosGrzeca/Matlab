INICIO -> BLOCO
BLOCO -> COMANDO BLOCO
BLOCO -> COMANDO; BLOCO
BLOCO -> COMANDO
BLOCO -> COMANDO;
COMANDO -> ATRIB
COMANDO -> FOR
COMANDO -> WHILE
COMANDO -> SWITCH
COMANDO -> IF
COMANDO -> TRY
COMANDO -> PARFOR
COMANDO -> CRIAFUNCTION
COMANDO -> FUNCTION
COMANDO -> break
COMANDO -> continue
COMANDO -> return VAL
COMP0 -> COMP2 COMP1
COMP0 -> COMP2
COMP1 -> || COMP2 COMP1
COMP1 -> || COMP2
COMP2 -> COMP4 COMP3
COMP2 -> COMP4
COMP3 -> && COMP4 COMP3
COMP3 -> && COMP4
COMP4 -> ~COMP5
COMP4 -> COMP5
COMP5 -> (COMP0)
COMP5 -> EXP1 > EXP1
COMP5 -> EXP1 >= EXP1
COMP5 -> EXP1 < EXP1
COMP5 -> EXP1 <= EXP1
COMP5 -> EXP1 == EXP1
COMP5 -> EXP1 ~= EXP1
COMP5 -> EXP1
EXP1 -> EXP3 EXP2
EXP1 -> EXP3
EXP2 -> + EXP3 EXP2
EXP2 -> + EXP3
EXP3 -> EXP5 EXP4
EXP3 -> EXP5
EXP4 -> - EXP5 EXP4
EXP4 -> - EXP5
EXP5 -> EXP7 EXP6
EXP5 -> EXP7
EXP6 -> | EXP7 EXP6
EXP6 -> | EXP7
EXP7 -> EXP9 EXP8
EXP7 -> EXP9
EXP8 -> * EXP9 EXP8
EXP8 -> * EXP9
EXP9 -> EXP11 EXP10
EXP9 -> EXP11
EXP10 -> / EXP11 EXP10
EXP10 -> / EXP11
EXP11 -> EXP13 EXP12
EXP11 -> EXP13
EXP12 -> & EXP13 EXP12
EXP12 -> & EXP13
EXP13 -> EXP15 EXP14
EXP13 -> EXP15
EXP14 -> ^ EXP15 EXP14
EXP14 -> ^ EXP15
EXP15 -> -EXPFIM
EXP15 -> EXPFIM
EXPFIM -> (EXP1)
EXPFIM -> id
EXPFIM -> cte
EXPFIM -> FUNCTION
ATRIB -> id = VAL
VAL -> id
VAL -> cte
VAL -> COMP0
VAL -> FUNCTION
FOR -> for ATRIB : VAL BLOCO end
FOR -> for ATRIB : VAL : VAL BLOCO end
WHILE -> while (COMP0) BLOCO end
TRY -> try BLOCO catch BLOCO end
IF -> if (COMP0) BLOCO ELSE end
ELSE -> else BLOCO
ELSE -> elseif (COMP0) BLOCO ELSE
ELSE -> vazio
PARAM0 -> PARAM2 PARAM1
PARAM0 -> PARAM2
PARAM1 -> , PARAM2 PARAM1
PARAM1 -> , PARAM2
PARAM2 -> VAL
CRIAFUNCTION -> function FUNCTION BLOCO end
FUNCTION -> id(PARAM0)
SWITCH -> switch id CASE end
CASE -> case CASEVALUE0 BLOCO CASE
CASE -> case CASEVALUE0 BLOCO
CASE -> otherwise BLOCO
CASEVALUE0 -> cte
CASEVALUE0 -> { CASEVALUE1 }
CASEVALUE1 -> cte , CASEVALUE2
CASEVALUE2 -> cte , CASEVALUE2
CASEVALUE2 -> cte
PARFOR -> ATRIB : VAL; BLOCO; end
